package by.m1ght.asm.common;

import by.m1ght.util.UniqueStringGenerator;
import by.m1ght.util.Util;
import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
import it.unimi.dsi.fastutil.longs.LongSet;
import sun.misc.Unsafe;

import java.lang.reflect.Field;

public class ObfHasher {
    private final LongSet cache = new LongOpenHashSet();
    private final long secret;
    private boolean remapNameOnly;

    public ObfHasher(long secret) {
        this.secret = secret;
    }

    public void setRemapNameOnly(boolean remapNameOnly) {
        this.remapNameOnly = remapNameOnly;
    }

    public boolean isRemapNameOnly() {
        return remapNameOnly;
    }

    public long hash(long offset, String s1) {
        return Util.hash(offset, s1) ^ secret;
    }

    public long hash(String s1) {
        return hash(0, s1);
    }

    public long hash(String s1, String s2) {
        return hash(hash(0, s1), s2);
    }

    public long hash(long offset, String s1, String s2) {
        return hash(hash(offset, s1), s2);
    }

    public long hash(String s1, String s2, String s3) {
        return hash(hash(hash(0, s1), s2), s3);
    }

    public void put(String s1, String s2) {
        cache.add(hash(s1, s2));
    }

    public void put(String name, String desc, String owner) {
        cache.add(hash(name, desc, owner));
    }

    public String remapName(String name, String desc, String owner) {
        long nameHash = hash(name);

        long total = hash(nameHash, desc, owner);

        if (cache.contains(total)) {
            return UniqueStringGenerator.get(nameHash);
        }
        return name;
    }

    public String remapNameDesc(String name, String desc, String owner) {
        long nameDescHash = hash(name, desc);

        long total = hash(nameDescHash, owner);

        if (cache.contains(total)) {
            return UniqueStringGenerator.get(nameDescHash);
        }
        return name;
    }

    public String remap(String name, String desc, String owner) {
        if (remapNameOnly) {
            return remapName(name, desc, owner);
        } else {
            return remapNameDesc(name, desc, owner);
        }
    }

    public String forceRemap(String name, String desc, String owner) {
        if (remapNameOnly) {
            return UniqueStringGenerator.get(hash(name));
        } else {
            return UniqueStringGenerator.get(hash(name, desc));
        }
    }

    public boolean isCached(long hash) {
        return cache.contains(hash);
    }
}
